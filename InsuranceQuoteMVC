// =====================
// Models/Insuree.cs + InsuranceContext.cs
// =====================
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;

namespace InsuranceQuoteMVC.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Required]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        public int SpeedingTickets { get; set; }

        public bool DUI { get; set; }

        public bool CoverageType { get; set; }

        public decimal Quote { get; set; }
    }

    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}

// =====================
// Controllers/InsureeController.cs
// =====================
using System;
using System.Linq;
using System.Web.Mvc;
using InsuranceQuoteMVC.Models;

namespace InsuranceQuoteMVC.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                decimal quote = 50m; // Base monthly

                // Age calculation
                var today = DateTime.Today;
                int age = today.Year - insuree.DateOfBirth.Year;
                if (insuree.DateOfBirth > today.AddYears(-age)) age--;

                if (age <= 18) quote += 100;
                else if (age >= 19 && age <= 25) quote += 50;
                else quote += 25;

                // Car year
                if (insuree.CarYear < 2000) quote += 25;
                else if (insuree.CarYear > 2015) quote += 25;

                // Car make/model
                if (!string.IsNullOrEmpty(insuree.CarMake) && insuree.CarMake.ToLower() == "porsche")
                {
                    quote += 25;
                    if (!string.IsNullOrEmpty(insuree.CarModel) && insuree.CarModel.ToLower() == "911 carrera")
                    {
                        quote += 25;
                    }
                }

                // Speeding tickets
                quote += insuree.SpeedingTickets * 10;

                // DUI
                if (insuree.DUI) quote *= 1.25m;

                // Coverage type
                if (insuree.CoverageType) quote *= 1.5m;

                insuree.Quote = Math.Round(quote, 2);

                db.Insurees.Add(insuree);
                db.SaveChanges();

                return RedirectToAction("Admin");
            }

            return View(insuree);
        }

        // GET: Insuree/Admin
        public ActionResult Admin()
        {
            var insurees = db.Insurees.ToList();
            return View(insurees);
        }
    }
}

// =====================
// Views/Insuree/Create.cshtml
// =====================
@model InsuranceQuoteMVC.Models.Insuree
@{
    ViewBag.Title = "Create Insuree";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarYear, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarYear, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarMake, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarMake, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarModel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarModel, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SpeedingTickets, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.SpeedingTickets, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DUI, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.DUI)</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CoverageType, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.CoverageType)</div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

// =====================
// Views/Insuree/Admin.cshtml
// =====================
@model IEnumerable<InsuranceQuoteMVC.Models.Insuree>
@{
    ViewBag.Title = "Admin Quotes View";
}

<h2>Admin Quotes View</h2>

<table class="table">
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Quote</th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>@item.FirstName</td>
        <td>@item.LastName</td>
        <td>@item.EmailAddress</td>
        <td>$@item.Quote</td>
    </tr>
}
</table>
/// =====================
// Models/Insuree.cs + InsuranceContext.cs
// =====================
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;

namespace InsuranceQuoteMVC.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Required]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        public int SpeedingTickets { get; set; }

        public bool DUI { get; set; }

        public bool CoverageType { get; set; }

        public decimal Quote { get; set; }
    }

    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}

// =====================
// Controllers/InsureeController.cs
// =====================
using System;
using System.Linq;
using System.Web.Mvc;
using InsuranceQuoteMVC.Models;

namespace InsuranceQuoteMVC.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                decimal quote = 50m; // Base monthly

                // Age calculation
                var today = DateTime.Today;
                int age = today.Year - insuree.DateOfBirth.Year;
                if (insuree.DateOfBirth > today.AddYears(-age)) age--;

                if (age <= 18) quote += 100;
                else if (age >= 19 && age <= 25) quote += 50;
                else quote += 25;

                // Car year
                if (insuree.CarYear < 2000) quote += 25;
                else if (insuree.CarYear > 2015) quote += 25;

                // Car make/model
                if (!string.IsNullOrEmpty(insuree.CarMake) && insuree.CarMake.ToLower() == "porsche")
                {
                    quote += 25;
                    if (!string.IsNullOrEmpty(insuree.CarModel) && insuree.CarModel.ToLower() == "911 carrera")
                    {
                        quote += 25;
                    }
                }

                // Speeding tickets
                quote += insuree.SpeedingTickets * 10;

                // DUI
                if (insuree.DUI) quote *= 1.25m;

                // Coverage type
                if (insuree.CoverageType) quote *= 1.5m;

                insuree.Quote = Math.Round(quote, 2);

                db.Insurees.Add(insuree);
                db.SaveChanges();

                return RedirectToAction("Admin");
            }

            return View(insuree);
        }

        // GET: Insuree/Admin
        public ActionResult Admin()
        {
            var insurees = db.Insurees.ToList();
            return View(insurees);
        }
    }
}

// =====================
// Views/Insuree/Create.cshtml
// =====================
@model InsuranceQuoteMVC.Models.Insuree
@{
    ViewBag.Title = "Create Insuree";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarYear, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarYear, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarMake, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarMake, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarModel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarModel, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SpeedingTickets, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.SpeedingTickets, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DUI, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.DUI)</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CoverageType, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.CoverageType)</div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

// =====================
// Views/Insuree/Admin.cshtml
// =====================
@model IEnumerable<InsuranceQuoteMVC.Models.Insuree>
@{
    ViewBag.Title = "Admin Quotes View";
}

<h2>Admin Quotes View</h2>

<table class="table">
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Quote</th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>@item.FirstName</td>
        <td>@item.LastName</td>
        <td>@item.EmailAddress</td>
        <td>$@item.Quote</td>
    </tr>
}
</table>
/// =====================
// Models/Insuree.cs + InsuranceContext.cs
// =====================
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;

namespace InsuranceQuoteMVC.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Required]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        public int SpeedingTickets { get; set; }

        public bool DUI { get; set; }

        public bool CoverageType { get; set; }

        public decimal Quote { get; set; }
    }

    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}

// =====================
// Controllers/InsureeController.cs
// =====================
using System;
using System.Linq;
using System.Web.Mvc;
using InsuranceQuoteMVC.Models;

namespace InsuranceQuoteMVC.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                decimal quote = 50m; // Base monthly

                // Age calculation
                var today = DateTime.Today;
                int age = today.Year - insuree.DateOfBirth.Year;
                if (insuree.DateOfBirth > today.AddYears(-age)) age--;

                if (age <= 18) quote += 100;
                else if (age >= 19 && age <= 25) quote += 50;
                else quote += 25;

                // Car year
                if (insuree.CarYear < 2000) quote += 25;
                else if (insuree.CarYear > 2015) quote += 25;

                // Car make/model
                if (!string.IsNullOrEmpty(insuree.CarMake) && insuree.CarMake.ToLower() == "porsche")
                {
                    quote += 25;
                    if (!string.IsNullOrEmpty(insuree.CarModel) && insuree.CarModel.ToLower() == "911 carrera")
                    {
                        quote += 25;
                    }
                }

                // Speeding tickets
                quote += insuree.SpeedingTickets * 10;

                // DUI
                if (insuree.DUI) quote *= 1.25m;

                // Coverage type
                if (insuree.CoverageType) quote *= 1.5m;

                insuree.Quote = Math.Round(quote, 2);

                db.Insurees.Add(insuree);
                db.SaveChanges();

                return RedirectToAction("Admin");
            }

            return View(insuree);
        }

        // GET: Insuree/Admin
        public ActionResult Admin()
        {
            var insurees = db.Insurees.ToList();
            return View(insurees);
        }
    }
}

// =====================
// Views/Insuree/Create.cshtml
// =====================
@model InsuranceQuoteMVC.Models.Insuree
@{
    ViewBag.Title = "Create Insuree";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarYear, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarYear, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarMake, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarMake, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarModel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarModel, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SpeedingTickets, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.SpeedingTickets, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DUI, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.DUI)</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CoverageType, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.CoverageType)</div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

// =====================
// Views/Insuree/Admin.cshtml
// =====================
@model IEnumerable<InsuranceQuoteMVC.Models.Insuree>
@{
    ViewBag.Title = "Admin Quotes View";
}

<h2>Admin Quotes View</h2>

<table class="table">
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Quote</th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>@item.FirstName</td>
        <td>@item.LastName</td>
        <td>@item.EmailAddress</td>
        <td>$@item.Quote</td>
    </tr>
}
</table>
/ // =====================
// Models/Insuree.cs + InsuranceContext.cs
// =====================
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;

namespace InsuranceQuoteMVC.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Required]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        public int SpeedingTickets { get; set; }

        public bool DUI { get; set; }

        public bool CoverageType { get; set; }

        public decimal Quote { get; set; }
    }

    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}

// =====================
// Controllers/InsureeController.cs
// =====================
using System;
using System.Linq;
using System.Web.Mvc;
using InsuranceQuoteMVC.Models;

namespace InsuranceQuoteMVC.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                decimal quote = 50m; // Base monthly

                // Age calculation
                var today = DateTime.Today;
                int age = today.Year - insuree.DateOfBirth.Year;
                if (insuree.DateOfBirth > today.AddYears(-age)) age--;

                if (age <= 18) quote += 100;
                else if (age >= 19 && age <= 25) quote += 50;
                else quote += 25;

                // Car year
                if (insuree.CarYear < 2000) quote += 25;
                else if (insuree.CarYear > 2015) quote += 25;

                // Car make/model
                if (!string.IsNullOrEmpty(insuree.CarMake) && insuree.CarMake.ToLower() == "porsche")
                {
                    quote += 25;
                    if (!string.IsNullOrEmpty(insuree.CarModel) && insuree.CarModel.ToLower() == "911 carrera")
                    {
                        quote += 25;
                    }
                }

                // Speeding tickets
                quote += insuree.SpeedingTickets * 10;

                // DUI
                if (insuree.DUI) quote *= 1.25m;

                // Coverage type
                if (insuree.CoverageType) quote *= 1.5m;

                insuree.Quote = Math.Round(quote, 2);

                db.Insurees.Add(insuree);
                db.SaveChanges();

                return RedirectToAction("Admin");
            }

            return View(insuree);
        }

        // GET: Insuree/Admin
        public ActionResult Admin()
        {
            var insurees = db.Insurees.ToList();
            return View(insurees);
        }
    }
}

// =====================
// Views/Insuree/Create.cshtml
// =====================
@model InsuranceQuoteMVC.Models.Insuree
@{
    ViewBag.Title = "Create Insuree";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarYear, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarYear, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarMake, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarMake, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarModel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarModel, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SpeedingTickets, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.SpeedingTickets, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DUI, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.DUI)</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CoverageType, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.CoverageType)</div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

// =====================
// Views/Insuree/Admin.cshtml
// =====================
@model IEnumerable<InsuranceQuoteMVC.Models.Insuree>
@{
    ViewBag.Title = "Admin Quotes View";
}

<h2>Admin Quotes View</h2>

<table class="table">
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Quote</th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>@item.FirstName</td>
        <td>@item.LastName</td>
        <td>@item.EmailAddress</td>
        <td>$@item.Quote</td>
    </tr>
}
</table>
V// =====================
// Models/Insuree.cs + InsuranceContext.cs
// =====================
using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;

namespace InsuranceQuoteMVC.Models
{
    public class Insuree
    {
        public int Id { get; set; }

        [Required]
        public string FirstName { get; set; }
        
        [Required]
        public string LastName { get; set; }
        
        [Required]
        public string EmailAddress { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Required]
        public int CarYear { get; set; }

        [Required]
        public string CarMake { get; set; }

        [Required]
        public string CarModel { get; set; }

        [Required]
        public int SpeedingTickets { get; set; }

        public bool DUI { get; set; }

        public bool CoverageType { get; set; }

        public decimal Quote { get; set; }
    }

    public class InsuranceContext : DbContext
    {
        public DbSet<Insuree> Insurees { get; set; }
    }
}

// =====================
// Controllers/InsureeController.cs
// =====================
using System;
using System.Linq;
using System.Web.Mvc;
using InsuranceQuoteMVC.Models;

namespace InsuranceQuoteMVC.Controllers
{
    public class InsureeController : Controller
    {
        private InsuranceContext db = new InsuranceContext();

        // GET: Insuree/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Insuree/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Insuree insuree)
        {
            if (ModelState.IsValid)
            {
                decimal quote = 50m; // Base monthly

                // Age calculation
                var today = DateTime.Today;
                int age = today.Year - insuree.DateOfBirth.Year;
                if (insuree.DateOfBirth > today.AddYears(-age)) age--;

                if (age <= 18) quote += 100;
                else if (age >= 19 && age <= 25) quote += 50;
                else quote += 25;

                // Car year
                if (insuree.CarYear < 2000) quote += 25;
                else if (insuree.CarYear > 2015) quote += 25;

                // Car make/model
                if (!string.IsNullOrEmpty(insuree.CarMake) && insuree.CarMake.ToLower() == "porsche")
                {
                    quote += 25;
                    if (!string.IsNullOrEmpty(insuree.CarModel) && insuree.CarModel.ToLower() == "911 carrera")
                    {
                        quote += 25;
                    }
                }

                // Speeding tickets
                quote += insuree.SpeedingTickets * 10;

                // DUI
                if (insuree.DUI) quote *= 1.25m;

                // Coverage type
                if (insuree.CoverageType) quote *= 1.5m;

                insuree.Quote = Math.Round(quote, 2);

                db.Insurees.Add(insuree);
                db.SaveChanges();

                return RedirectToAction("Admin");
            }

            return View(insuree);
        }

        // GET: Insuree/Admin
        public ActionResult Admin()
        {
            var insurees = db.Insurees.ToList();
            return View(insurees);
        }
    }
}

// =====================
// Views/Insuree/Create.cshtml
// =====================
@model InsuranceQuoteMVC.Models.Insuree
@{
    ViewBag.Title = "Create Insuree";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(m => m.FirstName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.LastName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DateOfBirth, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarYear, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarYear, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarMake, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarMake, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CarModel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.CarModel, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SpeedingTickets, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(m => m.SpeedingTickets, new { htmlAttributes = new { @class = "form-control" } })</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.DUI, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.DUI)</div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CoverageType, new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.CheckBoxFor(m => m.CoverageType)</div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

// =====================
// Views/Insuree/Admin.cshtml
// =====================
@model IEnumerable<InsuranceQuoteMVC.Models.Insuree>
@{
    ViewBag.Title = "Admin Quotes View";
}

<h2>Admin Quotes View</h2>

<table class="table">
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Quote</th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>@item.FirstName</td>
        <td>@item.LastName</td>
        <td>@item.EmailAddress</td>
        <td>$@item.Quote</td>
    </tr>
}
</table>
 /YourProjectNames
  /ConsoleMath
 /Employeeclass.cs
 /Package Express
   / Controllers
       InsureeController.cs
   / Models
        Insuree.cs
   / Views
       /Insuree.cs
        Create.cshtml
        Admin.cshtml
        /Shared
            ...(e.g.,_Layout.cshtml) 
    /App_Data
      Insurance.mdf
      Insurance_log.ldf
/InsuranceQuoteMVC
    /Controllers
    /Models
    /Views
        /Insuree
            Create.cshtml
            Admin.cshtml
            ...
/App_Data/
    Insurance.mdf
    Insurance_log.ldf
    

